priority 1

snippet hi "start a script"
#!/usr/bin/env bash
set -u

`!v substitute(expand('%:t:r'), '-', '_', 'g')`_main(){
	${1::}
}

if ! (return 0 2>/dev/null); then
  >&2 echo "--> \$0 starting with $*."
  `!v substitute(expand('%:t:r'), '-', '_', 'g')`_main "$@"; res=\$?
  >&2 echo "<-- \$0 returned with \$res."
	exit "$res"
fi
endsnippet


snippet name
if [[ "\${BASH_SOURCE[0]}" == "\${0}" ]]; then
  `!v expand('%:t:r')` "$@"
fi
endsnippet


snippet r "((res|=$?))"
((res|=\$?))
endsnippet

snippet res "((res|=$?))"
((res|=\$?))
endsnippet

snippet for "for ... in ... "
for ${1:i} in ${2:"$@"}; do 
	${0:${VISUAL}}
done
endsnippet

snippet if "if ... then (if)" b
if ${1:true}; then
	${0:${VISUAL}}
fi
endsnippet

snippet case "switch"
case \$1 in
	a|add) shift; add "$@"; return $?;;
	*) echo "Error: Unkown command: $*"; return 1;;
esac
endsnippet

snippet date "My date format"
date +'%Y-%m-%dT%H:%M:%S'
endsnippet

snippet parse "parse argument in"
parse_argument(){
	while (( 0 != $# )); do
		case \$1 in
			-h|--help)
				echo "Help yourself: lint your code!"
				return
				;;
			--${1:v1})
				$1=\$2
				shift
				shift
				;;
			*)
				shift
		esac
	done
}
endsnippet


snippet is_in_array "Check # From: https://stackoverflow.com/a/8574392/2544873"
is_in_array() {
  ### Check if arg1 <string> is in rest of args
  local match="\$1" element; shift
  for element; do [[ "$element" == "$match" ]] && return 0; done
  return 1
}
endsnippet

snippet is_int "Check if is int  # From: https://stackoverflow.com/questions/806906, for float ^[0-9]+([.][0-9]+)?$"
is_int(){
  ### Check is arg1 <string> is an integer (signed)
	[[ \$1 =~ ^[+-]?[0-9]+$ ]] && return 0 || return 1
}
endsnippet


snippet print_args "Print input argument one per line"
print_args(){
  ### Print input arguments, one per line
  local cnt=1
  for s_arg in "$@"; do
    echo "$((cnt++))/ $s_arg!"
  done
}
endsnippet


snippet print_stack "Print stacktrace"
print_stack(){
  ### Print current stack trace to stderr
  local i
  local fstg="%1s/ %20s %20s %20s\n"
  >&2 printf "$fstg" "" Function File Line
  for i in "${!FUNCNAME[@]}"; do
    >&2 printf "$fstg" "$i" "${FUNCNAME[$i]}" "${BASH_SOURCE[$i]}" "${BASH_LINENO[$i]}"
  done
}
endsnippet


snippet #! "Shebang"
#!/usr/bin/env bash
endsnippet


snippet (( "Context arith"
\$((${0:${VISUAL}}))
endsnippet

snippet a "Expand array"
"\${${1:a_arr}[@]}"
endsnippet

snippet arr "Expand array"
"\${${1:a_arr}[@]}"
endsnippet


snippet test "Test version"
version1.0
endsnippet

snippet ts "Trick for presentation"
local ts=${file##"$path_task/"}; ts=${ts%%.task}
local task=$(< "$file"); task=${task//$'\n'/<br />}
endsnippet


snippet assert "Small assert command"
assert(){
  local b_not=0; [[ not == "\$1" ]] && { b_not=1; shift ; }
  out=$("$@"); local res=$((b_not ? !$? : $?))
  echo "[$res] $* => $out"
}
endsnippet

snippet usage "Usage function reading file docstring"
usage(){
  sed -n "/^: '/,/^'/p" "\${BASH_SOURCE[0]}" | sed '1d;\$d'
}
endsnippet
