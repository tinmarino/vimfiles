#!/usr/bin/env bash
# Implement generic preview command to use as default for Fzf
#
# From: https://github.com/junegunn/fzf/issues/1928
# From: https://gist.github.com/junegunn/f4fca918e937e6bf5bad#gistcomment-2981199

#if [[ -e ${input} && $(file --mime ${input}) =~ /directory ]]; then
#  ls -1 --color=always ${input}
#elif [[ -e ${input} && $(file --mime ${input}) =~ binary ]]; then
#  echo -ne "" # I don't want to show the preview window
#elif [[ ${input} =~ .*:[[:digit:]]*:.* ]]; then
#  # etc
#fi


abat(){
  : 'Filter to color code from stdin in language (arg1), tested
    Standalone but better install bat and perl commands or define colors variable
    Ex: echo true bash code | bash
  '
  local fil=$1
  # If command bat do not exist, just print in yellow
  if ! command -v bat &> /dev/null; then
    cat "$fil"
    return 0
  fi

  # It can be alias or function. In my case bat is aliased to: PAGER= bat'
  bat --style numbers --color always --pager "" --line-range :500 --theme zenburn "$fil"
}


fzf_preview(){
  local input="$*"
  input="${input/#\~/$HOME}"
  
  # Clause: if file, display it
  if [[ -f "$input" && -r "$input" ]]; then
    # If symlink, get full path
    [[ -L "$input" ]] && input="$(readlink "$input")"
    
    abat "$input"
  fi
  
  # Clause: if Directory, show tree
  if [[ -d "$input" ]]; then
    # -C for color
    # -L for max depth
    tree -C -L 2 "$input"
  fi
  
  # Clause: if a git hash, show commit
  set -- "$(echo -- "$input" | grep -o '\b[a-f0-9]\{7\}')";
  if [[ -n "$*" ]]; then
    # missing some potential argument of git log (filter)
    git show --color=always "$1"
    return
  fi
}


if ! (return 0 2>/dev/null); then
  fzf_preview "$@"
  res=$?
  exit "$res"
fi
