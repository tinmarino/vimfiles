# vim:ft=sh

[credential]
	helper = store

[alias]
    # One letter
    a = add
    b = branch
    c = commit -m
    cc = commit
    cp = cherry-pick
    d = diff
    f = pull --rebase
    fa = fetch --all
    h = push
    k = checkout
    l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    r = rebase
    s = status
    t = "!gitk --all &"

    # LA for List Alias. Ex : g la
    la = "!git config -l | grep alias | cut -c 7-"
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

    lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    lg = !"git lg1"

    # Quick
    # Status to stage by number and not name. Ex : g st; g a 1; g u 1
    qs = "!cd -- ${GIT_PREFIX:-.}; git -c color.ui=always status --short | perl -lane 'my $color1=substr(@F[0], 0, 5); my $flag=substr(@F[0], 5, -3); $flag= \" \" . $flag if not flag =~ m/\\e\\[3m/; $,=\" \"; printf \"%s %4s %3s %s\\n\", $color1, ++$l, $flag, @F[1];'"
    # Helper: Keep only numbers
    funcremovenumber = "!fct() { echo $@ | perl -ane '$OFS=\" \"; print join \" \", grep(!/^[\\d,\\.]*$/, @F); print \" \";' -;}; fct"
    funckeepnumber = "!fct() { echo $@ | perl -ane '$OFS=\" \"; print grep(/^[\\d,\\.]*$/, @F)' -; }; fct"
    funcdiff = "!fct() { \
            cd -- ${GIT_PREFIX:-.}; \
            if [ -x \"$(command -v diff-so-fancy)\" ]; then \
                git diff --color-words $@; \
                `#Some bug with AnsiEsc`; \
                `#git diff $@ | diff-so-fancy | vman -c 'set nowrap' --select ;`; \
            else \
                git diff --color-words $@; \
            fi \
        }; fct"
    # Helper: Quick PrintF: Grep file[s]
    qp = "!qprint() { \
        `# Git alias is working in root direcotry`; \
        `# https://stackoverflow.com/questions/26243145`; \
        cd -- ${GIT_PREFIX:-.};  \
        `# Print the non number parameters`; \
        git funcremovenumber $@; \
        `# Get the lines matching the number params`; \
        r_num=$(git funckeepnumber $@); \
        `# If no numeric arguments gives me all`; \
        [ -z \"$r_num\" ] && r_num=1..1000;  \
        git status --short | cat -n | \
        perl -ane \"no warnings; print @F[2] . ' ' if $. ~~ [ $r_num ]\" | \
        perl -pe 'chop'; }; qprint"
    qa = "!qstage() { cd -- ${GIT_PREFIX:-.}; git add `git qp $*` ; git qs; }; qstage"
    qd = "!qdiff() { git funcdiff `git qp $*`; git qs; }; qdiff"
    qdw = "!qdiffd() { git funcdiff --word-diff --color=always `git qp $*`; git qs; }; qdiffd"
    qdww = "!qdiffd() { git funcdiff --word-diff-regex=. --color=always `git qp $*`; git qs; }; qdiffd"
    qdc = "!qdiffc() { git funcdiff --cached `git qp $*`; git qs; }; qdiffc"
    qdcw = "!qdiffcc() { git funcdiff --cached --word-diff `git qp $*`; git qs; }; qdiffcc"
    qdcww = "!qdiffcc() { git funcdiff --cached --word-diff-regex=. `git qp $*`; git qs; }; qdiffcc"
    qe = "!qedit() { cd -- ${GIT_PREFIX:-.}; vim -c'Gdiffsplit' `git qp $1`; git qs; }; qedit"
    qee = "!qedit() { cd -- ${GIT_PREFIX:-.}; vim `git qp $1`; git qs; }; qedit"
    qk = "!qcheckout() { cd -- ${GIT_PREFIX:-.}; git checkout -- `git qp $1`; git qs; }; qcheckout"
    qr = "!qreset() { cd -- ${GIT_PREFIX:-.}; git reset HEAD `git qp $1`; git qs; }; qreset"
    qu = "!qunstage() { cd -- ${GIT_PREFIX:-.}; git reset HEAD `git qp $1`; git qs; }; qunstage"
    qv = qe
 
    # Fuzzy from https://github.com/mattorb/dotfiles/blob/f8ab099f8105e4700a713b75ba32df3ac723d485/git/.gitaliases#L81
    # fuzzy add using fzf
	  fa = "!git ls-files -m -o --exclude-standard | fzf --print0 -m --preview 'git diff {}' --preview-window=top:10:wrap | xargs -0 -t -o git add --all"

    # Util
    aa = add --all
    au = add --u
    cm = commit -m
    ca = commit --amend
    cam = commit --amend -m
    ck = checkout
    dc = diff --cached
    dcw = diff --cached --word-diff-regex=.
    dw = diff --word-diff-regex=.
    dww = diff --word-diff
    dn = diff --name-only
    ds = dc  # --Staged
    kb = 
    ph = push
    pl = pull
    plr = pull --rebase
    pr = pull --rebase
    ra = rebase --abort
    rb = rebase
    rc = rebase --continue

    # Remove
    rmc = rm --cached

    # Submudule
    smuir = submodule update --init --recursive

    # Find text in any commit ever.
    grep-all = !"f() { git rev-list --all | xargs git grep \"$@\"; }; f"

    # List alias
	  alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /

    test = "!fct() { echo $PATH; diff-so-fancy; }; fct"

[rerere]
	enabled = true

[core]
	excludesfile = ~/.gitignore

[http]
	sslVerify = false

[user]
	email = tinmarino@gmail.com
	name = Tinmarino
