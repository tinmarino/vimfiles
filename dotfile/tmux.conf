# Configuration
  # Remap prefix from 'C-b' to 'C-a'
  #set -g prefix C-b
  #set -g prefix2 C-q
  #bind q send-prefix
  set -g prefix C-q
  set -g prefix2 C-b
  bind C-q send-prefix

  # For nested Ctrl-s -> Send prefix
  # TODO removed to map in vim
  #bind -n C-s send-prefix

  # Enable mouse mode (tmux 2.1 and above)
  set -g mouse on

  # https://superuser.com/questions/968942/why-does-tmux-create-new-windows-as-login-shells-by-default/970847#970847
  set-option -g default-command "/usr/bin/env bash"

  # Set bash as default shell
  set-option -g default-shell "/usr/bin/env bash"

  # Set ability to capture on start and restore on exit window data when running an application
  setw -g alternate-screen on

  # Lower escape timing from 500ms to 50ms for quicker response to scroll-buffer access
  set -s escape-time 50

  # don't rename windows automatically
  set-option -g allow-rename off

  # So I don't have escape up pb on vi
  set-option -s escape-time 0

  # Vim mode copy mode
  set-window-option -g mode-keys vi

  # Start counting on 1: For qwerty keyboard
  set -g base-index 1

  # get strikethought
  set -as terminal-overrides ',*:smxx=\E[9m'
  set -g default-terminal "xterm-256color"
  #set -g default-terminal "tmux-256color"

# Appearance
  # Increase scrollback 2000 default, too much use lot of ram
  set-option -g history-limit 50000

  # Set history file so keep commands
  set-option -sg history-file ~/.tmux_history

  # I dont care ? | pwd & date
  set-option -g status-right ''

  # Keep title : [Session] Title (of Pane)
  set-option -g set-titles-string "[#S] #T"
  set-option -g set-titles on

  # Pane border: status top is annnoying
  set -g pane-border-status off
  # Pane border: defautl is white
  set -g pane-border-style fg=green
  # Pane border: active yellow -> get faster eye on cursor
  set -g pane-active-border-style "bg=default fg=yellow"

  # Status bar
  set-option -g status-style fg=colour136,bg=colour235
  # default window title colors
  set-window-option -g window-status-style fg=colour244,bg=default
  # active window title colors
  set-window-option -g window-status-current-style fg=colour166,bg=default
  # Set name of window with renaming
  # Note: b:means basename
  set-option -g automatic-rename-format '#{pane_current_command}'


# Binding root mode
  # Shift arrow -> switch window
  # Source SPavez with Tilix and https://gist.github.com/spicycode/1229612
  bind -n S-Left  previous-window
  bind -n S-Right next-window
  # -- Ctrl-Shift arrow to reorder windows
  bind -n C-S-Left swap-window -t -1 \; previous-window 
  bind -n C-S-Right swap-window -t +1 \; next-window 

  # Ctrl-Shift-T -> Create new tab
  # bind -n C-n new-window -c "#{pane_current_path}"
  # Nop, it conflicts with vim complete (of course)!

  # Vim tmux navigator
  # Smart pane switching with awareness of Vim splits.
  # See: https://github.com/christoomey/vim-tmux-navigator
  is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
      | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
  bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
  bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
  bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
  bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'
  bind -n 'M-Left' if-shell  "$is_vim" 'send-keys M-Left'  'select-pane -L'
  bind -n 'M-Down' if-shell  "$is_vim" 'send-keys M-Down'  'select-pane -D'
  bind -n 'M-Up' if-shell    "$is_vim" 'send-keys M-Up'  'select-pane -U'
  bind -n 'M-Right' if-shell "$is_vim" 'send-keys M-Right'  'select-pane -R'
  tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
  if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
      "bind -n 'M-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
  if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
      "bind -n 'M-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

  # Alt-Up even in copy mode
  bind -T copy-mode-vi 'M-h' select-pane -L
  bind -T copy-mode-vi 'M-j' select-pane -D
  bind -T copy-mode-vi 'M-k' select-pane -U
  bind -T copy-mode-vi 'M-l' select-pane -R

  bind -T copy-mode-vi 'M-Left'  select-pane -L
  bind -T copy-mode-vi 'M-Down'  select-pane -D
  bind -T copy-mode-vi 'M-Up'    select-pane -U
  bind -T copy-mode-vi 'M-Right' select-pane -R
  bind -T copy-mode-vi 'M-\' select-pane -l


# Binding normal mode
  # Join pane with @ which is close to ! (break-pane)
  # See: https://unix.stackexchange.com/questions/14300/moving-tmux-pane-to-window
  bind @ join-pane -h -b -s !

  # Split panes using | and -
  bind | split-window -h -c "#{pane_current_path}"  # By default: %
  bind - split-window -v -c "#{pane_current_path}"
  bind _ split-window -v -c "#{pane_current_path}"

  # New window same path (-a = next)
  bind c new-window -a -c "#{pane_current_path}"

  # Cycle pane (defautl <c-o>
  bind q select-pane -t :.+
  bind C-q select-pane -t :.+

  # Move between panes hjkl (never used, see bind -n alt arrow)
  bind h select-pane -L
  bind j select-pane -D
  bind k select-pane -U
  bind l select-pane -R

  # Resize panes with arrow keys because alt-arrow keys doesn't work
  bind -r Up    resize-pane -U 10
  bind -r Down  resize-pane -D 10
  bind -r Left  resize-pane -L 10
  bind -r Right resize-pane -R 10

  # Source: r -> Reload
  bind r source-file ~/.tmux.conf \; display-message 'tmux conf sourced'

# Clipboard Yank, Paste
  yank="$v/bin/_copy_to_terminal.sh"

  set-option -ag terminal-overrides ",tmux-256color:Ms=\\E]52;c;%p2%s\\7"
  set-option -ag terminal-overrides ",xterm-256color:Ms=\\E]52;c;%p2%s\\7"
  bind y run-shell "tmux save-buffer - | $yank" \; display-message "Copied tmux buffer to clipboard"
  bind C-y run-shell "tmux save-buffer - | $yank" \; display-message "Copied tmux buffer to clipboard"
  bind C-p run "xclip -o | tmux load-buffer - ; tmux paste-buffer"

# Binding copy mode
  # Trigger copy mode by Alt up
  # bind -n M-Up copy-mode

  bind -T copy-mode-vi Escape send-keys -X  cancel		# exit copy mode; or hit q default enter
  bind -T copy-mode-vi y send-keys -X copy-selection		# yank default enter
  bind -T copy-mode-vi v send-keys -X begin-selection		# begin visual mode; default <sapce>
  bind -T copy-mode-vi V send-keys -X select-line		# visual line
  bind -T copy-mode-vi r send-keys -X rectangle-toggle 		# visual block toggle

  # Copy selected text
  bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
  bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
  bind -T copy-mode-vi Y send-keys -X copy-line \;\
      run "tmux save-buffer - | $yank"
  bind -T copy-mode-vi D send-keys -X copy-end-of-line \;\
      run "tmux save-buffer - | $yank"
  bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
  #bind -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
      run "tmux save-buffer - | $yank"

  # Copy selection on drag end event, but do not cancel copy mode and do not clear selection
  # clear select on subsequence mouse click
  #bind -T copy-mode-vi MouseDragEnd1Pane \
  #    send-keys -X copy-pipe "$yank"
  #bind -T copy-mode-vi MouseDown1Pane select-pane \;\
  #   send-keys -X clear-selection

  # iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
  # tmux show-options -g -s set-clipboard
  # set-clipboard on|external
  set -g set-clipboard on

# Mouse
  # Drag windows tab on the status bar to move (link: https://github.com/tmux/tmux/issues/656)
  bind -n MouseDrag1Status swap-window -d -t=

  # Stay here at release mouse
  #unbind-key -T copy-mode-vi MouseDragEnd1Pane
  #bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection

  # Mouse select line (without new line)
  bind -T copy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; send-keys h
  bind -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word

  # Mouse middle and triple click
  bind -T root  TripleClick1Pane select-pane -t = \; copy-mode -M \; send-keys -X select-line \; send-keys h  # TrippleCLick select
  bind -T root  DoubleClick1Pane select-pane -t = \; copy-mode -M \; send-keys -X select-word
  bind -T copy-mode-vi MouseDown2Pane send-keys -X copy-selection \; send-keys -X paste-buffer \; send-keys -X cancel \; send-keys -X copy-selection 		# Middle click paste
  # -- With run trick to avoid "Not in a mode" after cancel from copy-mode
  bind -T copy-mode-vi MouseDown2Pane send-keys -X copy-selection-and-cancel \; run "tmux paste-buffer" 		# Middle click paste
  bind -T root  MouseDown2Pane paste-buffer

  #bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"


# Vim quick edit
  # T not as singleton
  bind t run-shell "$HOME/.vim/bin/_tin_tmux_util.sh link ALKI 9 $HOME/wiki/alki \"vim -c'call Windex(3)'\" _TIN_TMUX_WINDOW_ALKI_$$_`date +%N`"
  # W as singleton
  bind w run-shell "$HOME/.vim/bin/_tin_tmux_util.sh link WIKI 8 $HOME/wiki/wiki \"vim -c'call Windex(1)'\" _TIN_TMUX_WINDOW_WIKI"

# Plugin
  # Easy Copy: Prefx+F => Just for demo purpor
  set -g @plugin 'Morantron/tmux-fingers'



# urlscan as context and url view
# install urlscan with
# pip install urlscan
bind u capture-pane \; save-buffer $TMPDIR/tmux-buffer \; \
new-window -n "urlscan" '$SHELL -c "urlscan < $TMPDIR/tmux-buffer"'



# #####################################
# Theme
# #####################################

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"


# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT" && [[ -f ~/.vim/scripts/tmux_remote.conf ]] ' \
    'source-file ~/.vim/scripts/tmux_remote.conf'

# Toogle for nested section: https://www.freecodecamp.org/news/tmux-in-practice-local-and-nested-remote-tmux-sessions-4f7ba5db8795/
bind -T root F2  \
  set prefix None \;\
  set key-table off \;\
  set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
  set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
  set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S \;\

bind -T off F2 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S


# define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
#wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#(bash -c '$(tmux show-option -qv key-table) = 'off' && echo OFF')#[default]"
#set -g status-right "wg_is_keys_off $wg_user_host"
set -g status-right "$wg_user_host"

# Status Line
   #tmux set -g window-status-format '#I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'
   #tmux set -g window-status-curren-format '#I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'

# Make scrolling in less and similar programms work in termux without using arrow keys
# Run this to install
# git clone https://github.com/nhdaly/tmux-better-mouse-mode ~/.tmux/plugins/tmux-better-mouse-mode
# termux-fix-shebang ~/.tmux/plugins/tmux-better-mouse-mode/scroll_copy_mode.tmux

# bugged
#set -g @scroll-without-changing-pane on
#set -g @scroll-speed-num-lines-per-scroll 1
#set -g @emulate-scroll-for-no-mouse-alternate-buffer on
#run-shell ~/.tmux/plugins/tmux-better-mouse-mode/scroll_copy_mode.tmux

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
  # With sudo apt install tmux-package-manager
  # run '/usr/share/tmux-plugin-manager/tpm'
# pane movement From https://unix.stackexchange.com/questions/14300/moving-tmux-pane-to-window
# Block summary key
#bind-key j command-prompt -p "join pane from:"  "join-pane -s '%%'"
#bind-key s command-prompt -p "send pane to:"  "join-pane -t '%%'"

# Fast
set -g terminal-overrides 'xterm*:smcup@:rmcup@'
